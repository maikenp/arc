--- a/basic-script.sh	2019-07-22 17:49:47.678606762 +0200
+++ b/basic-script.sh	2019-07-22 17:49:47.680606715 +0200
@@ -8,7 +8,7 @@
 #SBATCH --nice=50
 #SBATCH -J 'gridjob'
 #SBATCH --get-user-env=10L
-#SBATCH -n 1
+#SBATCH -n 8
 #SBATCH 
 
 # Overide umask of execution node (sometime values are really strange)
@@ -64,23 +64,15 @@
 export 'GRID_GLOBAL_JOBINTERFACE='
 export 'GRID_GLOBAL_JOBHOST='

-RUNTIME_JOB_DIR=@TEST_SESSION_DIR@/@TEST_JOB_ID@
-RUNTIME_JOB_STDIN=/dev/null
-RUNTIME_JOB_STDOUT=/dev/null
-RUNTIME_JOB_STDERR=/dev/null
-RUNTIME_JOB_DIAG=@TEST_SESSION_DIR@/@TEST_JOB_ID@.diag
-if [ ! -z "$RUNTIME_GRIDAREA_DIR" ] ; then
-  RUNTIME_JOB_DIR=$RUNTIME_GRIDAREA_DIR/`basename $RUNTIME_JOB_DIR`
-  RUNTIME_JOB_STDIN=`echo "$RUNTIME_JOB_STDIN" | sed "s#^$RUNTIME_JOB_DIR#$RUNTIME_GRIDAREA_DIR#"`
-  RUNTIME_JOB_STDOUT=`echo "$RUNTIME_JOB_STDOUT" | sed "s#^$RUNTIME_JOB_DIR#$RUNTIME_GRIDAREA_DIR#"`
-  RUNTIME_JOB_STDERR=`echo "$RUNTIME_JOB_STDERR" | sed "s#^$RUNTIME_JOB_DIR#$RUNTIME_GRIDAREA_DIR#"`
-  RUNTIME_JOB_DIAG=`echo "$RUNTIME_JOB_DIAG" | sed "s#^$RUNTIME_JOB_DIR#$RUNTIME_GRIDAREA_DIR#"`
-  RUNTIME_CONTROL_DIR=`echo "$RUNTIME_CONTROL_DIR" | sed "s#^$RUNTIME_JOB_DIR#$RUNTIME_GRIDAREA_DIR#"`
-fi
-RUNTIME_LOCAL_SCRATCH_DIR=${RUNTIME_LOCAL_SCRATCH_DIR:-}
+RUNTIME_JOB_DIR=/local/scratch/multicore_scratch
+RUNTIME_JOB_DIAG=/local/scratch/multicore_scratch.diag
+RUNTIME_JOB_STDIN="/dev/null"
+RUNTIME_JOB_STDOUT="/dev/null"
+RUNTIME_JOB_STDERR="/dev/null"
+RUNTIME_LOCAL_SCRATCH_DIR=${RUNTIME_LOCAL_SCRATCH_DIR:-/local/scratch}
 RUNTIME_LOCAL_SCRATCH_MOVE_TOOL=${RUNTIME_LOCAL_SCRATCH_MOVE_TOOL:-mv}
 RUNTIME_FRONTEND_SEES_NODE=${RUNTIME_FRONTEND_SEES_NODE:-}
-RUNTIME_NODE_SEES_FRONTEND=${RUNTIME_NODE_SEES_FRONTEND:-yes}
+RUNTIME_NODE_SEES_FRONTEND=${RUNTIME_NODE_SEES_FRONTEND:-}
   if [ ! -z "$RUNTIME_LOCAL_SCRATCH_DIR" ] && [ ! -z "$RUNTIME_NODE_SEES_FRONTEND" ]; then
     RUNTIME_NODE_JOB_DIR="$RUNTIME_LOCAL_SCRATCH_DIR"/`basename "$RUNTIME_JOB_DIR"`
     rm -rf "$RUNTIME_NODE_JOB_DIR"
@@ -141,8 +136,21 @@
 RESULT=0
 
 if [ "$RESULT" = '0' ] ; then
+# RunTimeEnvironment function for MULTICORE_SCRATCH:
+RTE_function_0 () {
+export RUNTIME_ENABLE_MULTICORE_SCRATCH="yes"
+}
 # Running RTE scripts (stage 1)
 runtimeenvironments=
+runtimeenvironments="${runtimeenvironments}MULTICORE_SCRATCH;"
+# Calling MULTICORE_SCRATCH function: 
+RTE_function_0 1 
+if [ $? -ne 0 ]; then
+    echo "Runtime MULTICORE_SCRATCH stage 1 execution failed." 1>&2
+    echo "Runtime MULTICORE_SCRATCH stage 1 execution failed." 1>>"${RUNTIME_JOB_STDERR}"
+    exit 1
+fi
+
 echo "runtimeenvironments=$runtimeenvironments" >> "$RUNTIME_JOB_DIAG"
 if [ ! "X$SLURM_NODEFILE" = 'X' ] ; then
   if [ -r "$SLURM_NODEFILE" ] ; then
@@ -182,7 +190,7 @@
   nodename=`/bin/hostname -f`
   echo "nodename=$nodename" >> "$RUNTIME_JOB_DIAG"
 fi
-echo "Processors=1" >> "$RUNTIME_JOB_DIAG"
+echo "Processors=8" >> "$RUNTIME_JOB_DIAG"
 echo "Benchmark=HEPSPEC:1.0" >> "$RUNTIME_JOB_DIAG"
 executable='/bin/true'
 # Check if executable exists
@@ -212,6 +220,15 @@
 fi
 # Running RTE scripts (stage 2)
 runtimeenvironments=
+runtimeenvironments="${runtimeenvironments}MULTICORE_SCRATCH;"
+# Calling MULTICORE_SCRATCH function: 
+RTE_function_0 2 
+if [ $? -ne 0 ]; then
+    echo "Runtime MULTICORE_SCRATCH stage 2 execution failed." 1>&2
+    echo "Runtime MULTICORE_SCRATCH stage 2 execution failed." 1>>"${RUNTIME_JOB_STDERR}"
+    exit 1
+fi
+
 # Measuring used scratch space
 echo "usedscratch=$( du -sb "$RUNTIME_JOB_DIR" | sed "s/\s.*$//" )" >> "$RUNTIME_JOB_DIAG"
 # Cleaning up extra files in the local scratch
