<?xml version="1.0"?>
<ArcConfig
  xmlns="http://www.nordugrid.org/schemas/ArcConfig/2007"
  xmlns:tcp="http://www.nordugrid.org/schemas/ArcMCCTCP/2007"
  xmlns:arex="http://www.nordugrid.org/schemas/a-rex/Config"
  xmlns:echo="http://www.nordugrid.org/schemas/echo/2009/08"
>
  <!-- Common configuration of the daemon -->
  <Server>
    <Pidfile>/run/arched.pid</Pidfile>
    <Logger level="DEBUG">/var/log/arc/arched.log</Logger>
  </Server>
  <!-- Where to find plugins -->
  <ModuleManager>
    <Path>/opt/arc/lib/arc/</Path>
  </ModuleManager>
  <!-- Simply load all needed plugins -->
  <Plugins><Name>mcctcp</Name></Plugins>
  <Plugins><Name>mcctls</Name></Plugins>
  <Plugins><Name>mcchttp</Name></Plugins>
  <Plugins><Name>mccsoap</Name></Plugins>
  <Plugins><Name>arcshc</Name></Plugins>
  <Plugins><Name>echo</Name></Plugins>
  <!-- Create a chain -->
  <Chain>
    <!-- TCP listening socket -->
    <Component name="tcp.service" id="tcp">
      <next id="tls"/>
      <!-- If id="tcp" then service will be HTTP instead of HTTPS -->
      <tcp:Listen><tcp:Port>60000</tcp:Port></tcp:Listen>
    </Component>
    <!-- Transport-level security -->
    <Component name="tls.service" id="tls">
      <next id="http"/>
      <!-- Location of server's security keys -->
      <KeyPath>/etc/grid-security/hostkey.pem</KeyPath>
      <CertificatePath>/etc/grid-security/hostcert.pem</CertificatePath>
      <CACertificatesDir>/etc/grid-security/certificates</CACertificatesDir>
      <!--delegation.collector must be inside tls MCC. It will extract delegation policy from
      peer proxy certificate-->
      <SecHandler name="delegation.collector" id="delegation" event="incoming"></SecHandler>  
    </Component>
    <!-- HTTP processing is done here -->
    <Component name="http.service" id="http">
      <next id="soap">POST</next>
    </Component>
    <!-- This one parses content into XML tree -->
    <Component name="soap.service" id="soap">
      <next id="plexer"/>
      <!--The example configuration about usernametoken and x509token can apply to any service and client,
      since these token only affect soap message.-->
      <!--usernametoken.handler is set here for consuming soap message with WS-Security UsernameToken
      there should be a file locally including mapping between username and password
      see src/pdc/usernametokensh/UsernameTokenSH.xsd for the configuration schema.
      If the usernametoken is switched on, the corresponding configuration on the client side
      should also be switched on, see $ARC_LOCATION/share/doc/arc/echo_client.xml -->
      <SecHandler name="usernametoken.handler" id="usernametoken" event="incoming">
        <Process>extract</Process>
        <PasswordSource>password.txt</PasswordSource>
      </SecHandler>
      <!--x509token.handler is set here for consuming soap message with WS-Security X509Token.
      Currently, only used for message signature/authentication, not used for encryption.
      <CACertificatePath/> is used for authentication, if no <CACertificatePath/> or <CACertificatesDir>
      set, the handler will only verify the signature of the message, will not do authentication 
      see src/pdc/x509tokensh/X509TokenSH.xsd for the configuration schema.
      If the x509token is switched on, the corresponding configuration on the client side
      should also be switched on, see $ARC_LOCATION/share/doc/arc/echo_client.xml-->
      <SecHandler name="x509token.handler" id="x509token" event="incoming">
        <Process>extract</Process>
        <CACertificatePath>ca.pem</CACertificatePath>
      </SecHandler>
    </Component>
    <!-- Directing messages to proper service -->
    <Plexer name="plexer.service" id="plexer">
      <next id="echo">^/Echo$</next>
    </Plexer>
    <!-- Echo service -->
    <Service name="echo" id="echo">
      <SecHandler name="arc.authz" id="authz" event="incoming">
        <!--simplelist.pdp will make decision according to a list which includes the permited DNs
        there should be a file locally including the permited list-->
        <PDP name="simplelist.pdp" location="simplelist"/>
        <!--arc.pdp will make decision according to formatted policy, see schema from Policy.xsd, 
        and Request.xsd-->
        <PDP name="arc.pdp">
          <PolicyStore>
            <Location type="file">Policy_Example.xml</Location>
            <!-- other policy location-->
          </PolicyStore>
        </PDP>
        <!--Remote pdp service invoker.-->
        <PDP name="pdpservice.invoker">
          <ServiceEndpoint>https://127.0.0.1:60001/PDP_Service</ServiceEndpoint>
          <KeyPath>./key.pem</KeyPath>
          <CertificatePath>./cert.pem</CertificatePath>
          <CACertificatePath>./ca.pem</CACertificatePath>
        </PDP>
        <!--deelegation.pdp will evaluate request against delegation policy which is extracted from
        proxy certificate by delegation.collector-->
        <PDP name="delegation.pdp"/>
      </SecHandler>
      <echo:prefix>[ </echo:prefix>
      <echo:suffix> ]</echo:suffix>
    </Service>
  </Chain>
</ArcConfig>

